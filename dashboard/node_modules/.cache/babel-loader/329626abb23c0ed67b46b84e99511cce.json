{"ast":null,"code":"var _jsxFileName = \"/Users/audi/Desktop/react projects/new_dashboard/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MoveButton from './MoveButton.js';\nimport DownloadButton from './DownloadButton.js';\nimport GradientButton from './GradientButton.js';\nimport OnOffButton from './OnOffButton.js';\nimport DistanceAngle from './DistanceAngle.js';\nimport Header from './Header.js';\nimport LinkTable from './Table.js';\nimport Spinner from './Spinner.js'; //comment out hamburger and project\n//pulling from local csv and render the table data automatically\n//pure: sliding window, one at a time\n//shift everything to the left\n//combine network's work\n\n/*flow chart of eventhandlers:\n1.dashboard has a state of controls= true\n2. have a OnOffButton.js, and we use it in this main\n3. declare a onToggleSwitch function that setState when the onOffButton is pressed (and hence calls the render function)\n4. pass the onToggleSwitch as a prop to the onOffButton\n5. In onOffButton, create an event handler function for when the button is pressed. Inside that func, call the func that was\npassed from the parent with the param of the latest controls state\n6.the onToggleSwitch finally setStates and renders\n7.Also need to make sure the func render calls has conditionals in it\n\n*/\n\nclass Dashboard extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      controls: false,\n      video: false,\n      frame_counter: 0,\n      render: false\n    };\n\n    this.onToggleSwitch = controls => {\n      //console.log(\"onToggleSwitch is called\");\n      //console.log(\"value of controls is\");\n      //console.log(controls);\n      this.setState({\n        controls: controls\n      });\n    };\n\n    this.renderOnOffButton = () => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          position: 'absolute',\n          top: '220px',\n          left: '1270px'\n        },\n        className: \"OnOffButton\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(OnOffButton, {\n        onClick: this.onToggleSwitch,\n        value: \"hello\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 10\n        }\n      }));\n    };\n\n    this.renderControls = () => {\n      if (!this.state.controls) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"controls\",\n          style: {\n            position: 'absolute',\n            top: '330px',\n            left: '1220px'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(DistanceAngle, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 13\n          }\n        })), /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            position: 'absolute',\n            top: '540px',\n            left: '1350px'\n          },\n          className: \"execute_move\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(GradientButton, {\n          text: \"EXECUTE\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 13\n          }\n        })));\n      } //console.log(\"I'm called! And bool value in function:\")\n      //console.log(this.state.controls);\n      //return <div> no controls</div>;\n\n    };\n\n    this.renderVideo = () => {\n      if (this.state.controls) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 9\n          }\n        }, this.renderImage());\n        /*\n        return(\n          <video style = {{position:'absolute', top:150, left:50, maxWidth:960,height:720}} controls >\n            Your brower does not support this video format.\n          </video>\n        );\n        */\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          position: 'absolute',\n          top: 150,\n          left: 50,\n          width: 960,\n          height: 720\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Spinner, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 11\n        }\n      }));\n    };\n\n    this.test_data = ['1662,60,53,57,51,7,46,2020-04-27 15:36:14.529748', '1661,41,62,98,35,81,24,2020-04-27 15:36:14.526756', '1660,99,72,50,40,58,76,2020-04-27 15:36:14.524763', '1659,70,30,74,20,49,34,2020-04-27 15:36:14.521769', '1658,5,94,6,21,19,73,2020-04-27 15:36:14.519775', '1662,60,53,57,51,7,46,2020-04-28 15:36:14.529748', '1661,41,62,98,35,81,24,2020-04-29 15:36:14.526756', '1660,99,72,50,40,58,76,2020-04-30 15:36:14.524763', '1659,70,30,74,20,49,34,2020-05-01 15:36:14.521769', '1658,5,94,6,21,19,73,2020-05-02 15:36:14.519775'];\n\n    this.fetch_new_frame = () => {\n      console.log(\"frame_counter:\");\n      console.log(this.state.frame_counter);\n      var new_counter = this.state.frame_counter + 1;\n      console.log(\"new_counter:\"); //console.log(new_counter);\n\n      if (this.state.frame_counter < 20) {\n        // CHANGE 10 later, hard coded now\n        //this.update_frame_counter();\n        this.setState({\n          frame_counter: new_counter\n        });\n        return true;\n      } else {\n        return false;\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"dashboard\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 7\n      }\n    }, this.renderContent(), \";\");\n  }\n\n  renderContent() {\n    //{this.renderVideo()}\n    //{this.renderImage()}\n    //setTimeout(() => { console.log(\"WAIT!\"); }, 2000);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }\n    }), this.renderTable_Download(), this.renderVideo(), this.renderOnOffButton(), this.renderControls());\n  }\n\n  //given this.state.frame_counter, process test_data so that rows_data contains exactly 5 rows\n  read_5_rows() {\n    var rows_data = [];\n\n    if (this.state.frame_counter > 4) {\n      rows_data = this.test_data.slice(this.state.frame_counter - 5, this.state.frame_counter);\n    } else {\n      //if current l\n      rows_data = this.test_data.slice(0, this.state.frame_counter);\n    }\n\n    var missing = 5 - rows_data.length; //console.log(\"missing\");\n    //console.log(missing);\n\n    var k;\n\n    for (k = 0; k < missing; k++) {\n      rows_data.push(\"NA,NA,NA,NA,NA,NA,NA\"); //NA________________\n    }\n\n    return rows_data;\n  }\n\n  renderTable_Download() {\n    //if controll button is currently toggled:\n    if (this.state.controls) {\n      var rows_data = this.read_5_rows(); //console.log(\"rows_data\");\n      //console.log(rows_data);\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"History\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          position: 'absolute',\n          top: '790px',\n          left: '1350px'\n        },\n        className: \"Download\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(DownloadButton, {\n        filename: \"log.csv\",\n        text: \"DOWNLOAD\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          position: 'absolute',\n          top: '320px',\n          left: '1060px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(LinkTable, {\n        rows_data: rows_data,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 13\n        }\n      })));\n    }\n  }\n\n  renderImage() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        position: 'absolute',\n        top: 150,\n        left: 50\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      style: {\n        borderRadius: 5\n      },\n      src: require('./data/test_pic.jpg'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  componentDidMount() {\n    this.fetch_new_frame();\n    /*declaring intervalID but not using it\n     when you called setInterval(\n     () => this.fetch_new_frame(),\n     1000\n    );\n    you are automaically calling this.fetch_new_frame every 1000 milisecond.\n    */\n\n    this.intervalID = setInterval(() => this.fetch_new_frame(), 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.intervalID);\n  }\n\n  componentDidUpdate(prevProps, prevState) {//console.log(\"update\")\n\n    /*\n    console.log(\"prevState.frame_counter\")\n    console.log(prevState.frame_counter)\n     if (prevState.frame_counter == this.state.frame_counter) {\n      this.fetch_new_frame();\n    }\n    */\n  }\n\n}\n\nReactDOM.render( /*#__PURE__*/React.createElement(Dashboard, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 266,\n    columnNumber: 5\n  }\n}), document.getElementById('root'));\n/*\nfunction fetch_new_frame() {\n\n     //display past image until you fetch new one\n     pastImg = currentImg;\n     document.querySelector('.display').innerHTML = '<img src=\\''+pastImg+'\\'>';\n\n     //fetch image\n     fetch('image.jpg')\n       .then(response => response.blob())\n       .then(images => {\n           // once you fetch new one display that one\n           currentImg = URL.createObjectURL(images)\n           document.querySelector('.display').innerHTML = '<img src=\\''+pastImg+'\\'>'+'<img src=\\''+currentImg+'\\'>';\n           document.querySelector('#update').innerHTML = 'update: ' + counter; counter += 1;\n       });\n\n     //fetch data\n     fetch('data.txt').then(function(response){\n       response.text().then(function(text){\n         document.querySelector('#data').innerHTML = 'lazer: ' + text;\n       })\n     });\n   }\n*/\n\n/*\nrenderControls = ()=>{\n  if (this.state.controls){\n    //console.log(\"renderControls called! And bool value in function:\")\n    //console.log(this.state.controls);\n    return(\n      <div className = \"controls\">\n        <div style = {{  position: 'absolute', top: '580px', left: '1000px'}} className = 'ThreeMoveButtons'>\n          <MoveButton text = \"Left\"  />\n          <MoveButton  text = \"Down\"/>\n          <MoveButton  text = \"Right\"  />\n        </div>\n         <div style= {{  position: 'absolute', top: '480px', left: '1100px'}} className = 'Top'>\n          <MoveButton  text = \"Top\"  />\n        </div>\n      </div>\n     );\n  }\n  //console.log(\"I'm called! And bool value in function:\")\n  //console.log(this.state.controls);\n  //return <div> no controls</div>;\n  }\nrenderCoord(){\n  return(\n    <div className=\"coordinates\">\n      <p style = {{position:'absolute',top:700, left:120, color:'#2F80ED', fontWeight: 'bold'}}> LINK X: 452 </p>\n      <p style = {{position:'absolute',top:700, left:240, color:'#2F80ED', fontWeight: 'bold'}}> LINK Y: 568 </p>\n      <p style = {{position:'absolute',top:730, left:120, color:'#2F80ED', fontWeight: 'bold'}}> LASER X: 128 </p>\n      <p style = {{position:'absolute',top:730, left:240, color:'#2F80ED', fontWeight: 'bold'}}> LASER Y: 345 </p>\n    </div>\n  );\n}\n renderDownload(){\n  if (this.state.controls){\n      return (\n      <div style= {{  position: 'absolute', top: '700px', left: '1360px'}} className = 'Download'>\n        <GradeintButton  text = \"DOWNLOAD LOG\"  />\n      </div>\n    );\n  }\n}\n*/\n\n/*\n   this.setState({ boardAddModalShow: true }, ()=> {\n     // any code you want to execute only after the newState has taken effect.\n            console.log(this.state.boardAddModalShow);\n       });\n*/\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA","map":{"version":3,"sources":["/Users/audi/Desktop/react projects/new_dashboard/src/index.js"],"names":["React","ReactDOM","MoveButton","DownloadButton","GradientButton","OnOffButton","DistanceAngle","Header","LinkTable","Spinner","Dashboard","Component","state","controls","video","frame_counter","render","onToggleSwitch","setState","renderOnOffButton","position","top","left","renderControls","renderVideo","renderImage","width","height","test_data","fetch_new_frame","console","log","new_counter","renderContent","renderTable_Download","read_5_rows","rows_data","slice","missing","length","k","push","borderRadius","require","componentDidMount","intervalID","setInterval","componentWillUnmount","clearInterval","componentDidUpdate","prevProps","prevState","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport MoveButton from './MoveButton.js';\nimport DownloadButton from './DownloadButton.js';\nimport GradientButton from './GradientButton.js'\nimport OnOffButton from './OnOffButton.js';\nimport DistanceAngle from './DistanceAngle.js'\nimport Header from './Header.js'\nimport LinkTable from'./Table.js'\nimport Spinner from './Spinner.js'\n//comment out hamburger and project\n//pulling from local csv and render the table data automatically\n//pure: sliding window, one at a time\n//shift everything to the left\n//combine network's work\n\n\n\n\n/*flow chart of eventhandlers:\n1.dashboard has a state of controls= true\n2. have a OnOffButton.js, and we use it in this main\n3. declare a onToggleSwitch function that setState when the onOffButton is pressed (and hence calls the render function)\n4. pass the onToggleSwitch as a prop to the onOffButton\n5. In onOffButton, create an event handler function for when the button is pressed. Inside that func, call the func that was\npassed from the parent with the param of the latest controls state\n6.the onToggleSwitch finally setStates and renders\n7.Also need to make sure the func render calls has conditionals in it\n\n*/\n\n\n\n\nclass Dashboard extends React.Component {\n  state = {controls:false, video:false, frame_counter:0, render:false};\n\n  render(){\n    return(\n      <div className = \"dashboard\">\n        {this.renderContent()};\n      </div>\n    );\n\n  }\n\n  renderContent(){\n    //{this.renderVideo()}\n    //{this.renderImage()}\n    //setTimeout(() => { console.log(\"WAIT!\"); }, 2000);\n    return (\n      <div>\n        <Header/>\n        {this.renderTable_Download()}\n        {this.renderVideo()}\n        {this.renderOnOffButton()}\n        {this.renderControls()}\n      </div>\n\n    );\n\n  }\n\n\n  onToggleSwitch = (controls) =>{\n    //console.log(\"onToggleSwitch is called\");\n    //console.log(\"value of controls is\");\n    //console.log(controls);\n\n    this.setState({controls:controls});\n\n  }\n\n\n  renderOnOffButton = () =>{\n      return(\n        <div style = {{  position: 'absolute', top: '220px', left: '1270px'}} className = 'OnOffButton'>\n         <OnOffButton onClick = {this.onToggleSwitch}  value = \"hello\"/>\n        </div>\n\n      );\n\n  }\n\n  //given this.state.frame_counter, process test_data so that rows_data contains exactly 5 rows\n  read_5_rows (){\n    var rows_data = [];\n\n    if (this.state.frame_counter > 4){\n      rows_data = this.test_data.slice(this.state.frame_counter-5,this.state.frame_counter);\n    }\n\n    else{ //if current l\n      rows_data = this.test_data.slice(0,this.state.frame_counter);\n    }\n    var missing = 5 - rows_data.length;\n    //console.log(\"missing\");\n    //console.log(missing);\n    var k;\n    for (k=0; k<missing; k++){\n      rows_data.push(\"NA,NA,NA,NA,NA,NA,NA\"); //NA________________\n    }\n\n    return rows_data;\n\n  }\n\n  renderTable_Download(){\n    //if controll button is currently toggled:\n    if (this.state.controls){\n      var rows_data = this.read_5_rows();\n      //console.log(\"rows_data\");\n      //console.log(rows_data);\n\n        return (\n        <div className = 'History'>\n          <div style= {{  position: 'absolute', top: '790px', left: '1350px'}} className = 'Download'>\n            <DownloadButton\n              filename = 'log.csv'\n              text = 'DOWNLOAD'\n            />\n          </div>\n\n          <div style ={{  position: 'absolute', top: '320px', left: '1060px'}}>\n            <LinkTable rows_data = {rows_data}/>\n          </div>\n        </div>\n      );\n    }\n  }\n\n\n  renderControls = ()=>{\n    if (!this.state.controls){\n      return(\n        <div>\n          <div className = \"controls\" style = {{  position: 'absolute', top: '330px', left: '1220px'}}>\n            <DistanceAngle/>\n          </div>\n\n          <div style= {{  position: 'absolute', top: '540px', left: '1350px'}} className = 'execute_move'>\n            <GradientButton  text = \"EXECUTE\"  />\n          </div>\n        </div>\n\n      );\n    }\n    //console.log(\"I'm called! And bool value in function:\")\n    //console.log(this.state.controls);\n    //return <div> no controls</div>;\n  }\n\n\n\n\n\n  renderVideo = () => {\n    if (this.state.controls){\n      return (\n        <div>\n          {this.renderImage()}\n        </div>\n      );\n      /*\n      return(\n        <video style = {{position:'absolute', top:150, left:50, maxWidth:960,height:720}} controls >\n          Your brower does not support this video format.\n        </video>\n      );\n      */\n    }\n    return (\n        <div style = {{position:'absolute', top:150, left:50, width: 960, height:720 }}>\n          <Spinner/>\n        </div>\n\n    );\n  }\n\n  renderImage(){\n    return (\n      <div style = {{position:'absolute', top:150, left:50}}>\n        <img style = {{borderRadius:5}} src={require('./data/test_pic.jpg')} />\n      </div>\n    );\n\n  }\n\n  test_data=\n  [\n    '1662,60,53,57,51,7,46,2020-04-27 15:36:14.529748',\n    '1661,41,62,98,35,81,24,2020-04-27 15:36:14.526756',\n    '1660,99,72,50,40,58,76,2020-04-27 15:36:14.524763',\n    '1659,70,30,74,20,49,34,2020-04-27 15:36:14.521769',\n    '1658,5,94,6,21,19,73,2020-04-27 15:36:14.519775',\n    '1662,60,53,57,51,7,46,2020-04-28 15:36:14.529748',\n    '1661,41,62,98,35,81,24,2020-04-29 15:36:14.526756',\n    '1660,99,72,50,40,58,76,2020-04-30 15:36:14.524763',\n    '1659,70,30,74,20,49,34,2020-05-01 15:36:14.521769',\n    '1658,5,94,6,21,19,73,2020-05-02 15:36:14.519775'\n  ];\n\n  //fetch function: right now it's just setting state and causing the screen to rerender\n  //the acutal data we use right now is a local var called test_data in this class\n  fetch_new_frame =  () => {\n    console.log(\"frame_counter:\");\n    console.log(this.state.frame_counter);\n    var new_counter = this.state.frame_counter + 1;\n    console.log(\"new_counter:\");\n    //console.log(new_counter);\n\n    if (this.state.frame_counter < 20){// CHANGE 10 later, hard coded now\n      //this.update_frame_counter();\n      this.setState({frame_counter: new_counter});\n      return true;\n    }\n    else{\n      return false;\n    }\n  };\n\n  componentDidMount(){\n    this.fetch_new_frame();\n    /*declaring intervalID but not using it\n\n    when you called setInterval(\n     () => this.fetch_new_frame(),\n     1000\n   );\n   you are automaically calling this.fetch_new_frame every 1000 milisecond.\n   */\n\n    this.intervalID = setInterval(\n     () => this.fetch_new_frame(),\n     1000\n     );\n\n   }\n\n   componentWillUnmount() {\n     clearInterval(this.intervalID);\n   }\n\n\n  componentDidUpdate(prevProps, prevState){\n    //console.log(\"update\")\n    /*\n    console.log(\"prevState.frame_counter\")\n    console.log(prevState.frame_counter)\n\n    if (prevState.frame_counter == this.state.frame_counter) {\n      this.fetch_new_frame();\n    }\n    */\n\n\n  }\n\n\n\n}\n\nReactDOM.render(\n    <Dashboard />,\n  document.getElementById('root')\n);\n\n/*\nfunction fetch_new_frame() {\n\n     //display past image until you fetch new one\n     pastImg = currentImg;\n     document.querySelector('.display').innerHTML = '<img src=\\''+pastImg+'\\'>';\n\n     //fetch image\n     fetch('image.jpg')\n       .then(response => response.blob())\n       .then(images => {\n           // once you fetch new one display that one\n           currentImg = URL.createObjectURL(images)\n           document.querySelector('.display').innerHTML = '<img src=\\''+pastImg+'\\'>'+'<img src=\\''+currentImg+'\\'>';\n           document.querySelector('#update').innerHTML = 'update: ' + counter; counter += 1;\n       });\n\n     //fetch data\n     fetch('data.txt').then(function(response){\n       response.text().then(function(text){\n         document.querySelector('#data').innerHTML = 'lazer: ' + text;\n       })\n     });\n   }\n*/\n\n\n\n\n  /*\n  renderControls = ()=>{\n    if (this.state.controls){\n      //console.log(\"renderControls called! And bool value in function:\")\n      //console.log(this.state.controls);\n      return(\n        <div className = \"controls\">\n          <div style = {{  position: 'absolute', top: '580px', left: '1000px'}} className = 'ThreeMoveButtons'>\n            <MoveButton text = \"Left\"  />\n            <MoveButton  text = \"Down\"/>\n            <MoveButton  text = \"Right\"  />\n          </div>\n\n          <div style= {{  position: 'absolute', top: '480px', left: '1100px'}} className = 'Top'>\n            <MoveButton  text = \"Top\"  />\n          </div>\n        </div>\n\n      );\n    }\n    //console.log(\"I'm called! And bool value in function:\")\n    //console.log(this.state.controls);\n    //return <div> no controls</div>;\n\n\n  }\n  renderCoord(){\n    return(\n      <div className=\"coordinates\">\n        <p style = {{position:'absolute',top:700, left:120, color:'#2F80ED', fontWeight: 'bold'}}> LINK X: 452 </p>\n        <p style = {{position:'absolute',top:700, left:240, color:'#2F80ED', fontWeight: 'bold'}}> LINK Y: 568 </p>\n        <p style = {{position:'absolute',top:730, left:120, color:'#2F80ED', fontWeight: 'bold'}}> LASER X: 128 </p>\n        <p style = {{position:'absolute',top:730, left:240, color:'#2F80ED', fontWeight: 'bold'}}> LASER Y: 345 </p>\n      </div>\n    );\n  }\n\n  renderDownload(){\n    if (this.state.controls){\n        return (\n        <div style= {{  position: 'absolute', top: '700px', left: '1360px'}} className = 'Download'>\n          <GradeintButton  text = \"DOWNLOAD LOG\"  />\n        </div>\n      );\n    }\n  }\n  */\n\n\n\n\n/*\n   this.setState({ boardAddModalShow: true }, ()=> {\n     // any code you want to execute only after the newState has taken effect.\n            console.log(this.state.boardAddModalShow);\n       });\n*/\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"]},"metadata":{},"sourceType":"module"}