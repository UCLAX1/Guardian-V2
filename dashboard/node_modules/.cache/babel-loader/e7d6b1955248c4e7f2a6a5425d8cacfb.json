{"ast":null,"code":"var _jsxFileName = \"/Users/audi/Desktop/react projects/new_dashboard/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MoveButton from './MoveButton.js';\nimport GradeintButton from './GradeintButton.js';\nimport OnOffButton from './OnOffButton.js';\nimport DistanceAngle from './DistanceAngle.js';\nimport Header from './Header.js';\nimport CoordTable from './Table.js';\nimport { Spinner } from './Spinner.js'; //4/20: merge column coordinates ()\n//add Distance Offset and Angle Offset as 2 new columns\n//Pixel dimensions: 960 x 720\n//download log: route to Downloads. Have bar at the bottom showing progress. Have a dummy csv/\n//download files generally: get general path\n//\n//NOTE: works at ZOOM 80 percent\n//remove link x link y\n//Switch controls and history\n//put actual image on\n//Add Loadng icon of same size\n//Show last 5 data points in a table when you press history\n//some ui on the table, dividling line\n//bold the header : time, linkx, link y etc\n//04/06/20 12:43:29.79\n//5 columns: first is time,\n//3 decimal points for link x y\n//go above the download button\n\n/*flow chart of eventhandlers:\n1.dashboard has a state of controls= true\n2. have a OnOffButton.js, and we use it in this main\n3. declare a onToggleSwitch function that setState when the onOffButton is pressed (and hence calls the render function)\n4. pass the onToggleSwitch as a prop to the onOffButton\n5. In onOffButton, create an event handler function for when the button is pressed. Inside that func, call the func that was\npassed from the parent with the param of the latest controls state\n6.the onToggleSwitch finally setStates and renders\n7.Also need to make sure the func render calls has conditionals in it\n\n*/\n\nfunction downloadBlob(blob, filename) {\n  // Create an object URL for the blob object\n  const url = URL.createObjectURL(blob); // Create a new anchor element\n\n  const a = document.createElement('a'); // Set the href and download attributes for the anchor element\n  // You can optionally set other attributes like `title`, etc\n  // Especially, if the anchor element will be attached to the DOM\n\n  a.href = url;\n  a.download = filename || 'download'; // Click handler that releases the object URL after the element has been clicked\n  // This is required for one-off downloads of the blob content\n\n  const clickHandler = () => {\n    setTimeout(() => {\n      URL.revokeObjectURL(url);\n      this.removeEventListener('click', clickHandler);\n    }, 150);\n  }; // Add the click event listener on the anchor element\n  // Comment out this line if you don't want a one-off download of the blob content\n\n\n  a.addEventListener('click', clickHandler, false); // Programmatically trigger a click on the anchor element\n  // Useful if you want the download to happen automatically\n  // Without attaching the anchor element to the DOM\n  // Comment out this line if you don't want an automatic download of the blob content\n\n  a.click(); // Return the anchor element\n  // Useful if you want a reference to the element\n  // in order to attach it to the DOM or use it in some other way\n\n  return a;\n} //Testing for download\n// Blob object for the content to be download\n\n\nconst blob = new Blob(['Vehicle,0367,Dex,IC15\\n0.55155,19.258,3.4012,1.7465\\n0.73538,1.4708,1.2869,2.2062\\n2.436,0.36768,2.8496,1.5627'], {\n  type: 'text/csv'\n}); // Create a download link for the blob content\n\nconst downloadLink = downloadBlob(blob, 'records.csv'); // Set the title and classnames of the link\n\ndownloadLink.title = 'Export Records as CSV';\ndownloadLink.classList.add('btn-link', 'download-link'); // Set the text content of the download link\n\ndownloadLink.textContent = 'Export Records'; // Attach the link to the DOM\n/////\n\nclass Dashboard extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      controls: false,\n      video: false\n    };\n\n    this.onToggleSwitch = controls => {\n      //console.log(\"onToggleSwitch is called\");\n      //console.log(\"value of controls is\");\n      //console.log(controls);\n      this.setState({\n        controls: controls\n      });\n    };\n\n    this.renderOnOffButton = () => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          position: 'absolute',\n          top: '220px',\n          left: '1300px'\n        },\n        className: \"OnOffButton\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(OnOffButton, {\n        onClick: this.onToggleSwitch,\n        value: \"hello\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 10\n        }\n      }));\n    };\n\n    this.renderControls = () => {\n      if (!this.state.controls) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"controls\",\n          style: {\n            position: 'absolute',\n            top: '330px',\n            left: '1250px'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(DistanceAngle, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 13\n          }\n        })), /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            position: 'absolute',\n            top: '540px',\n            left: '1380px'\n          },\n          className: \"execute_move\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(GradeintButton, {\n          text: \"EXECUTE\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 13\n          }\n        })));\n      } //console.log(\"I'm called! And bool value in function:\")\n      //console.log(this.state.controls);\n      //return <div> no controls</div>;\n\n    };\n\n    this.renderVideo = () => {\n      if (this.state.controls) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 9\n          }\n        }, this.renderImage());\n        /*\n        return(\n          <video style = {{position:'absolute', top:150, left:50, maxWidth:960,height:720}} controls >\n            Your brower does not support this video format.\n          </video>\n        );\n        */\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          position: 'absolute',\n          top: 150,\n          left: 50,\n          width: 960,\n          height: 720\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Spinner, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 11\n        }\n      }));\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"dashboard\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 7\n      }\n    }, this.renderContent(), \";\");\n  }\n\n  renderContent() {\n    //{this.renderVideo()}\n    //{this.renderImage()}\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }\n    }), downloadLink, this.renderTable_Download(), this.renderVideo(), this.renderOnOffButton(), this.renderControls());\n  }\n\n  renderTable_Download() {\n    if (this.state.controls) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"History\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          position: 'absolute',\n          top: '700px',\n          left: '1350px'\n        },\n        className: \"Download\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(GradeintButton, {\n        text: \"DOWNLOAD LOG\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          position: 'absolute',\n          top: '320px',\n          left: '1060px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(CoordTable, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 13\n        }\n      })));\n    }\n  }\n\n  renderImage() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        position: 'absolute',\n        top: 150,\n        left: 50\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: require('./data/test_pic.jpg'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n/*\nrenderControls = ()=>{\n  if (this.state.controls){\n    //console.log(\"renderControls called! And bool value in function:\")\n    //console.log(this.state.controls);\n    return(\n      <div className = \"controls\">\n        <div style = {{  position: 'absolute', top: '580px', left: '1000px'}} className = 'ThreeMoveButtons'>\n          <MoveButton text = \"Left\"  />\n          <MoveButton  text = \"Down\"/>\n          <MoveButton  text = \"Right\"  />\n        </div>\n         <div style= {{  position: 'absolute', top: '480px', left: '1100px'}} className = 'Top'>\n          <MoveButton  text = \"Top\"  />\n        </div>\n      </div>\n     );\n  }\n  //console.log(\"I'm called! And bool value in function:\")\n  //console.log(this.state.controls);\n  //return <div> no controls</div>;\n  }\nrenderCoord(){\n  return(\n    <div className=\"coordinates\">\n      <p style = {{position:'absolute',top:700, left:120, color:'#2F80ED', fontWeight: 'bold'}}> LINK X: 452 </p>\n      <p style = {{position:'absolute',top:700, left:240, color:'#2F80ED', fontWeight: 'bold'}}> LINK Y: 568 </p>\n      <p style = {{position:'absolute',top:730, left:120, color:'#2F80ED', fontWeight: 'bold'}}> LASER X: 128 </p>\n      <p style = {{position:'absolute',top:730, left:240, color:'#2F80ED', fontWeight: 'bold'}}> LASER Y: 345 </p>\n    </div>\n  );\n}\n renderDownload(){\n  if (this.state.controls){\n      return (\n      <div style= {{  position: 'absolute', top: '700px', left: '1360px'}} className = 'Download'>\n        <GradeintButton  text = \"DOWNLOAD LOG\"  />\n      </div>\n    );\n  }\n}\n*/\n\n\nReactDOM.render( /*#__PURE__*/React.createElement(Dashboard, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 287,\n    columnNumber: 5\n  }\n}), document.getElementById('root')); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA","map":{"version":3,"sources":["/Users/audi/Desktop/react projects/new_dashboard/src/index.js"],"names":["React","ReactDOM","MoveButton","GradeintButton","OnOffButton","DistanceAngle","Header","CoordTable","Spinner","downloadBlob","blob","filename","url","URL","createObjectURL","a","document","createElement","href","download","clickHandler","setTimeout","revokeObjectURL","removeEventListener","addEventListener","click","Blob","type","downloadLink","title","classList","add","textContent","Dashboard","Component","state","controls","video","onToggleSwitch","setState","renderOnOffButton","position","top","left","renderControls","renderVideo","renderImage","width","height","render","renderContent","renderTable_Download","require","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport MoveButton from './MoveButton.js';\nimport GradeintButton from './GradeintButton.js';\nimport OnOffButton from './OnOffButton.js';\nimport DistanceAngle from './DistanceAngle.js'\nimport Header from './Header.js'\nimport CoordTable from'./Table.js'\nimport {Spinner} from './Spinner.js'\n//4/20: merge column coordinates ()\n//add Distance Offset and Angle Offset as 2 new columns\n//Pixel dimensions: 960 x 720\n\n//download log: route to Downloads. Have bar at the bottom showing progress. Have a dummy csv/\n//download files generally: get general path\n\n\n\n//\n//NOTE: works at ZOOM 80 percent\n\n//remove link x link y\n//Switch controls and history\n//put actual image on\n//Add Loadng icon of same size\n\n//Show last 5 data points in a table when you press history\n//some ui on the table, dividling line\n//bold the header : time, linkx, link y etc\n//04/06/20 12:43:29.79\n//5 columns: first is time,\n//3 decimal points for link x y\n//go above the download button\n\n\n/*flow chart of eventhandlers:\n1.dashboard has a state of controls= true\n2. have a OnOffButton.js, and we use it in this main\n3. declare a onToggleSwitch function that setState when the onOffButton is pressed (and hence calls the render function)\n4. pass the onToggleSwitch as a prop to the onOffButton\n5. In onOffButton, create an event handler function for when the button is pressed. Inside that func, call the func that was\npassed from the parent with the param of the latest controls state\n6.the onToggleSwitch finally setStates and renders\n7.Also need to make sure the func render calls has conditionals in it\n\n*/\nfunction downloadBlob(blob, filename) {\n  // Create an object URL for the blob object\n  const url = URL.createObjectURL(blob);\n\n  // Create a new anchor element\n  const a = document.createElement('a');\n\n  // Set the href and download attributes for the anchor element\n  // You can optionally set other attributes like `title`, etc\n  // Especially, if the anchor element will be attached to the DOM\n  a.href = url;\n  a.download = filename || 'download';\n\n  // Click handler that releases the object URL after the element has been clicked\n  // This is required for one-off downloads of the blob content\n  const clickHandler = () => {\n    setTimeout(() => {\n      URL.revokeObjectURL(url);\n      this.removeEventListener('click', clickHandler);\n    }, 150);\n  };\n\n  // Add the click event listener on the anchor element\n  // Comment out this line if you don't want a one-off download of the blob content\n  a.addEventListener('click', clickHandler, false);\n\n  // Programmatically trigger a click on the anchor element\n  // Useful if you want the download to happen automatically\n  // Without attaching the anchor element to the DOM\n  // Comment out this line if you don't want an automatic download of the blob content\n  a.click();\n\n  // Return the anchor element\n  // Useful if you want a reference to the element\n  // in order to attach it to the DOM or use it in some other way\n  return a;\n}\n\n//Testing for download\n// Blob object for the content to be download\nconst blob = new Blob(\n  [ 'Vehicle,0367,Dex,IC15\\n0.55155,19.258,3.4012,1.7465\\n0.73538,1.4708,1.2869,2.2062\\n2.436,0.36768,2.8496,1.5627' ],\n  { type: 'text/csv' }\n);\n\n// Create a download link for the blob content\nconst downloadLink = downloadBlob(blob, 'records.csv');\n\n// Set the title and classnames of the link\ndownloadLink.title = 'Export Records as CSV';\ndownloadLink.classList.add('btn-link', 'download-link');\n\n// Set the text content of the download link\ndownloadLink.textContent = 'Export Records';\n\n// Attach the link to the DOM\n\n\n\n/////\n\nclass Dashboard extends React.Component {\n  state = {controls:false, video:false};\n\n  render(){\n    return(\n      <div className = \"dashboard\">\n        {this.renderContent()};\n      </div>\n    );\n\n  }\n\n  renderContent(){\n    //{this.renderVideo()}\n    //{this.renderImage()}\n\n    return (\n      <div >\n        <Header/>\n        {downloadLink}\n        {this.renderTable_Download()}\n        {this.renderVideo()}\n        {this.renderOnOffButton()}\n        {this.renderControls()}\n      </div>\n    );\n\n  }\n\n  onToggleSwitch = (controls) =>{\n    //console.log(\"onToggleSwitch is called\");\n    //console.log(\"value of controls is\");\n    //console.log(controls);\n\n    this.setState({controls:controls});\n\n  }\n  renderOnOffButton = () =>{\n      return(\n        <div style = {{  position: 'absolute', top: '220px', left: '1300px'}} className = 'OnOffButton'>\n         <OnOffButton onClick = {this.onToggleSwitch}  value = \"hello\"/>\n        </div>\n\n      );\n\n  }\n  renderTable_Download(){\n\n    if (this.state.controls){\n        return (\n        <div className = 'History'>\n          <div style= {{  position: 'absolute', top: '700px', left: '1350px'}} className = 'Download'>\n            <GradeintButton  text = \"DOWNLOAD LOG\"  />\n          </div>\n\n          <div style ={{  position: 'absolute', top: '320px', left: '1060px'}}>\n            <CoordTable/>\n          </div>\n        </div>\n      );\n    }\n  }\n\n\n  renderControls = ()=>{\n    if (!this.state.controls){\n      return(\n        <div>\n          <div className = \"controls\" style = {{  position: 'absolute', top: '330px', left: '1250px'}}>\n            <DistanceAngle/>\n          </div>\n\n          <div style= {{  position: 'absolute', top: '540px', left: '1380px'}} className = 'execute_move'>\n            <GradeintButton  text = \"EXECUTE\"  />\n          </div>\n        </div>\n\n      );\n    }\n    //console.log(\"I'm called! And bool value in function:\")\n    //console.log(this.state.controls);\n    //return <div> no controls</div>;\n  }\n\n\n\n\n\n  renderVideo = () => {\n    if (this.state.controls){\n      return (\n        <div>\n          {this.renderImage()}\n        </div>\n      );\n      /*\n      return(\n        <video style = {{position:'absolute', top:150, left:50, maxWidth:960,height:720}} controls >\n          Your brower does not support this video format.\n        </video>\n      );\n      */\n    }\n    return (\n        <div style = {{position:'absolute', top:150, left:50, width: 960, height:720}}>\n          <Spinner/>\n        </div>\n\n    );\n  }\n  renderImage(){\n    return (\n      <div style = {{position:'absolute', top:150, left:50}}>\n        <img src={require('./data/test_pic.jpg')} />\n      </div>\n    );\n\n  }\n\n\n\n  }\n\n  /*\n  renderControls = ()=>{\n    if (this.state.controls){\n      //console.log(\"renderControls called! And bool value in function:\")\n      //console.log(this.state.controls);\n      return(\n        <div className = \"controls\">\n          <div style = {{  position: 'absolute', top: '580px', left: '1000px'}} className = 'ThreeMoveButtons'>\n            <MoveButton text = \"Left\"  />\n            <MoveButton  text = \"Down\"/>\n            <MoveButton  text = \"Right\"  />\n          </div>\n\n          <div style= {{  position: 'absolute', top: '480px', left: '1100px'}} className = 'Top'>\n            <MoveButton  text = \"Top\"  />\n          </div>\n        </div>\n\n      );\n    }\n    //console.log(\"I'm called! And bool value in function:\")\n    //console.log(this.state.controls);\n    //return <div> no controls</div>;\n\n\n  }\n  renderCoord(){\n    return(\n      <div className=\"coordinates\">\n        <p style = {{position:'absolute',top:700, left:120, color:'#2F80ED', fontWeight: 'bold'}}> LINK X: 452 </p>\n        <p style = {{position:'absolute',top:700, left:240, color:'#2F80ED', fontWeight: 'bold'}}> LINK Y: 568 </p>\n        <p style = {{position:'absolute',top:730, left:120, color:'#2F80ED', fontWeight: 'bold'}}> LASER X: 128 </p>\n        <p style = {{position:'absolute',top:730, left:240, color:'#2F80ED', fontWeight: 'bold'}}> LASER Y: 345 </p>\n      </div>\n    );\n  }\n\n  renderDownload(){\n    if (this.state.controls){\n        return (\n        <div style= {{  position: 'absolute', top: '700px', left: '1360px'}} className = 'Download'>\n          <GradeintButton  text = \"DOWNLOAD LOG\"  />\n        </div>\n      );\n    }\n  }\n  */\n\n\n\n\n\n\nReactDOM.render(\n    <Dashboard />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"]},"metadata":{},"sourceType":"module"}